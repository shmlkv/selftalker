{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpenModal","setState","modalOpen","onCloseModal","onOpenModalClear","modalClearOpen","onCloseModalClear","changeSelector","inputStatus","state","handleInput","event","target","value","newState","chat","push","type","text","refs","chat_input","animateScroll","scrollToBottom","containerId","handleClear","bind","assertThisInitialized","_this2","window","addEventListener","e","key","_this3","modalStyles","open","modal","min-width","closeButton","cursor","react_default","a","createElement","className","role","id","map","message","ref","onKeyPress","onClick","class","alt","index_es","onClose","center","styles","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e38eba7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Modal from \"react-responsive-modal\";\nimport { animateScroll } from \"react-scroll\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputStatus: \"left\",\n      modalOpen: false,\n      modalClearOpen: false,\n      chat: [\n        { type: \"left\", text: \"What do you want?\" },\n        {\n          type: \"right\",\n          text: \"I wanted to ask about the meaning of my life\"\n        }\n      ]\n    };\n    this.handleInput = this.handleInput.bind(this);\n  }\n  onOpenModal = () => {\n    this.setState({ modalOpen: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ modalOpen: false });\n  };\n  onOpenModalClear = () => {\n    this.setState({ modalClearOpen: true });\n  };\n\n  onCloseModalClear = () => {\n    this.setState({ modalClearOpen: false });\n  };\n  changeSelector = () => {\n    this.setState({\n      inputStatus: this.state.inputStatus == \"left\" ? \"right\" : \"left\"\n    });\n  };\n  handleInput = event => {\n    if (event.target.value) {\n      let newState = this.state.chat;\n\n      newState.push({\n        type: this.state.inputStatus,\n        text: event.target.value\n      });\n\n      this.setState({\n        chat: newState\n      });\n      this.refs.chat_input.value = \"\";\n      animateScroll.scrollToBottom({\n        containerId: \"chat_messages\"\n      });\n    }\n  };\n  handleClear = event => {\n    this.setState({ chat: [], modalClearOpen: false });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", e => {\n      if (!this.refs.chat_input.value) {\n        if (e.key == \"ArrowLeft\") this.setState({ inputStatus: \"left\" });\n        if (e.key == \"ArrowRight\") this.setState({ inputStatus: \"right\" });\n      }\n    });\n  }\n\n  render() {\n    const { open } = this.state;\n    const modalStyles = {\n      modal: { \"min-width\": \"500px\" },\n      closeButton: { cursor: \"pointer\" }\n    };\n    return (\n      <div className=\"App\">\n        <h1 role=\"img\">Selftalker 🧘🏻‍♂️</h1>\n        <p>Sometimes you need to talk to yourself</p>\n        <div className=\"chat\">\n          <div className=\"chat_messages\" id=\"chat_messages\">\n            {this.state.chat.map(message => (\n              <div className={message.type + \" message\"}>{message.text}</div>\n            ))}\n          </div>\n\n          <input\n            className=\"chat_input\"\n            ref=\"chat_input\"\n            onKeyPress={event => {\n              if (event.key === \"Enter\") {\n                this.handleInput(event);\n              }\n            }}\n          />\n          <span\n            className=\"chat_selector\"\n            onClick={this.changeSelector}\n            role=\"img\"\n          >\n            {this.state.inputStatus == \"left\" ? \"⬅️\" : \"➡️\"}\n          </span>\n        </div>\n        <div class=\"buttons\">\n          <span\n            className=\"info\"\n            onClick={this.onOpenModal}\n            alt=\"Info\"\n            role=\"img\"\n          >\n            ℹ️\n          </span>\n          <span\n            className=\"clear\"\n            onClick={this.onOpenModalClear}\n            alt=\"Clear chat\"\n            role=\"img\"\n          >\n            🗑\n          </span>\n        </div>\n        <Modal\n          open={this.state.modalOpen}\n          onClose={this.onCloseModal}\n          center\n          styles={modalStyles}\n        >\n          <h2>ℹ️</h2>\n          <p>\n            Use <code>←</code> <code>→</code> with empty input to change the\n            direction of the message.\n          </p>\n          <p>\n            We don't store any data on our servers, after reloading messages\n            will be cleared.\n          </p>\n        </Modal>\n        <Modal\n          open={this.state.modalClearOpen}\n          onClose={this.onCloseModalClear}\n          center\n          styles={modalStyles}\n        >\n          <h2>🗑</h2>\n\n          <p>Are you sure you want to clear the messages?</p>\n          <button onClick={this.handleClear}>Sure, delete it all</button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}